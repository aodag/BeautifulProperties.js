{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Beautifulproperties.js","tagline":"","body":"===========================================================\r\nBeautifulProperties.js - Extension of ECMAScript5 property.\r\n===========================================================\r\n\r\nFeatures\r\n========\r\n\r\nLazyInitializable\r\n--------------------------\r\n\r\nBeautifulProperties.LazyInitializable.define can define a property, it's initialized at first access.\r\n\r\n.. code-block:: javascript\r\n\r\n  var proto = {};\r\n  BeautifulProperties.LazyInitializable.define(proto,'boundFunction',function(){\r\n    return (function () {\r\n      console.log(this);\r\n    }).bind(this);\r\n  });\r\n  var object1 = Object.create(proto);\r\n  object1.a = 1;\r\n  var boundFunction1 = object1.boundFunction;\r\n  boundFunction1();// {a:1,boundFunction:fn}\r\n  var object2 = Object.create(proto);\r\n  object2.a = 2;\r\n  var boundFunction2 = object2.boundFunction;\r\n  boundFunction2();// {a:2boundFunction:fn}\r\n\r\nHookable\r\n----------------------\r\n\r\nBeautifulProperties.Hookable.define supports hooks for setting/getting property,replace or modify value.\r\n\r\nhooks\r\n\r\n.. code-block:: javascript\r\n\r\n  var object = {};\r\n  BeautifulProperties.Hookable.define(object,'key',{\r\n    beforeGet : function(val){\r\n      console.log('beforeGet');\r\n    },\r\n    afterGet : function(val){\r\n      console.log('afterGet',val);\r\n      return val;\r\n    },\r\n    beforeSet : function(val,previousVal){\r\n      console.log('beforeSet',val,previousVal);\r\n      return val;\r\n    },\r\n    afterSet : function(val,previousVal){\r\n      console.log('afterSet',val,previousVal);\r\n    }\r\n  });\r\n  object.key = 1;\r\n  object.key = 2;\r\n  object.key;//1\r\n\r\nmodify getting value\r\n\r\n.. code-block:: javascript\r\n\r\n  var object = {};\r\n  BeautifulProperties.Hookable.define(object,'key',{\r\n    afterGet : function(val){\r\n      return val * 2;\r\n    }\r\n  });\r\n  object.key = 1;\r\n  object.key;//2\r\n\r\nmodify setting value\r\n\r\n.. code-block:: javascript\r\n\r\n  var object = {};\r\n  BeautifulProperties.Hookable.define(object,'key',{\r\n    beforeSet : function(val,previousVal){\r\n      return val * 2;\r\n    }\r\n  });\r\n  object.key = 1;\r\n  object.key;//2\r\n\r\nEvents\r\n------\r\n\r\nObservable\r\n------------------------\r\n\r\nBeautifulProperties.Observable.define supports key/value observation.\r\n\r\n.. code-block:: javascript\r\n\r\n  var object = {};\r\n  BeautifulProperties.Observable.define(object,'key');\r\n  object.key=1;\r\n  BeautifulProperties.Events.on(object,'change:key',function(ev,val,previousVal){\r\n    console.log(val,previousVal);// val:2,previousVal:1\r\n  });\r\n  object.key=2;\r\n\r\n\r\nInstallation and usage\r\n======================\r\n\r\nIn browsers:\r\n------------\r\n\r\n.. code-block:: html\r\n\r\n  <script src=\"BeautifulProperties.js\"></script>\r\n\r\nIn an AMD loader like RequireJS:\r\n--------------------------------\r\n\r\n.. code-block:: javascript\r\n\r\n  require(['BeautifulProperties'], function(BeautifulProperties) {\r\n  });\r\n\r\nAuthor\r\n======\r\n\r\nmonjudoh\r\n\r\nContributors\r\n============\r\n\r\n* aodag (Atsushi Odagiri) aodagx@gmail.com https://github.com/aodag\r\n    * He named this library.\r\n"}